{"ast":null,"code":"import { Person } from '../models/Person.model';\nimport { Address } from '../models/Address.model';\nimport { EmergencyContact } from '../models/EmergencyContact.model';\nimport { Appointment } from '../models/Appointment.model';\nimport { Patient } from '../models/Patient.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/profile-form.service\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nfunction PatientUpdateComponent_label_72_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\");\n    i0.ɵɵelement(1, \"input\", 61);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const allergy_r21 = ctx.$implicit;\n    const i_r22 = ctx.index;\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControl\", ctx_r14.getCommonAllergiesControl(i_r22));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", allergy_r21.name, \" \");\n  }\n}\nfunction PatientUpdateComponent_option_93_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 62);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const provider_r23 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", provider_r23.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", provider_r23.person.firstName, \" \", provider_r23.person.lastName, \" \");\n  }\n}\nfunction PatientUpdateComponent_table_103_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const appointment_r25 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(appointment_r25.startTime);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(appointment_r25.endTime);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"\", appointment_r25.healthcareProvider.person.firstName, \" \", appointment_r25.healthcareProvider.person.lastName, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(appointment_r25.appointmentType);\n  }\n}\nfunction PatientUpdateComponent_table_103_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\", 63)(1, \"thead\")(2, \"tr\")(3, \"th\");\n    i0.ɵɵtext(4, \"Start time\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6, \"End time\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"HealthcareProvider\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"th\");\n    i0.ɵɵtext(10, \"Appointment type\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(11, \"tbody\");\n    i0.ɵɵtemplate(12, PatientUpdateComponent_table_103_tr_12_Template, 9, 5, \"tr\", 45);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(12);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r20.patient.appointments);\n  }\n}\nexport class PatientUpdateComponent {\n  constructor(route, patientService, formBuilder) {\n    this.route = route;\n    this.patientService = patientService;\n    this.formBuilder = formBuilder;\n    this.personId = \"\";\n    this.person = new Person();\n    this.address = new Address();\n    this.emergencyContact = new EmergencyContact();\n    this.patient = new Patient();\n    this.commonAllergies = [];\n    this.healthcareProviders = [];\n    this.appointment = new Appointment();\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.personId = params['id'];\n      this.loadData();\n    });\n  }\n  loadData() {\n    this.patientService.getPatientData(this.personId).subscribe(data => {\n      this.person = data.person;\n      this.address = data.address;\n      this.emergencyContact = data.emergencyContact;\n      this.patient = data.patient;\n      this.commonAllergies = data.commonAllergies;\n      this.healthcareProviders = data.healthcareProviders;\n      this.buildForm();\n      this.appointment.patientId = this.patient.id;\n    });\n  }\n  buildForm() {\n    this.patientAllergiesForm = this.formBuilder.group({\n      commonAllergies: this.buildAllergyCheckboxes()\n    });\n    this.setInitialCheckboxValues();\n  }\n  buildAllergyCheckboxes() {\n    const checkboxes = this.commonAllergies.map(allergy => {\n      return this.formBuilder.control(false);\n    });\n    return this.formBuilder.array(checkboxes);\n  }\n  setInitialCheckboxValues() {\n    const allergyControls = this.patientAllergiesForm.get('commonAllergies');\n    this.patient.allergies.forEach(allergy => {\n      const index = this.commonAllergies.findIndex(a => a.id === allergy.id);\n      if (index !== -1) {\n        allergyControls.controls[index].setValue(true);\n      }\n    });\n    console.log('Allergy Controls:', allergyControls.value);\n  }\n  getCommonAllergiesControl(index) {\n    const commonAllergiesArray = this.patientAllergiesForm.get('commonAllergies');\n    return commonAllergiesArray.controls[index];\n  }\n  onSubmitAllergies() {\n    this.patient.allergies = this.patientAllergiesForm.value.commonAllergies.map((checked, index) => checked ? this.commonAllergies[index] : null).filter(allergy => allergy !== null);\n    this.patientService.editPatient(this.patient).subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  onSubmit(personalInfo) {\n    if (personalInfo.valid) {\n      this.patientService.editPerson(this.person ? this.person : {}).subscribe({\n        next: res => {\n          console.log(res);\n        },\n        error: err => {\n          console.log(err);\n        }\n      });\n      this.patientService.editAddress(this.address ? this.address : {}).subscribe({\n        next: res => {\n          console.log(res);\n        },\n        error: err => {\n          console.log(err);\n        }\n      });\n      this.patientService.editEmergencyContact(this.emergencyContact ? this.emergencyContact : {}).subscribe({\n        next: res => {\n          console.log(res);\n        },\n        error: err => {\n          console.log(err);\n        }\n      });\n    }\n  }\n  onAppointmentSubmit(appointmentInfo) {\n    //const selectedProviderId = appointmentInfo.value.healthcareProviderId;\n    // const selectedProvider = this.healthcareProviders.find(provider => provider.id === selectedProviderId);\n    //if (selectedProvider) {\n    //this.appointment.healthcareProvider = selectedProvider;\n    //}\n    //this.appointment.patient = this.patient;\n    this.patientService.postAppointment(this.appointment).subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n}\nPatientUpdateComponent.ɵfac = function PatientUpdateComponent_Factory(t) {\n  return new (t || PatientUpdateComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.ProfileFormService), i0.ɵɵdirectiveInject(i3.FormBuilder));\n};\nPatientUpdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PatientUpdateComponent,\n  selectors: [[\"app-patient-update\"]],\n  decls: 104,\n  vars: 22,\n  consts: [[3, \"submit\"], [\"personalInfo\", \"ngForm\"], [1, \"row\"], [1, \"col-md-4\"], [\"for\", \"first-name\"], [\"id\", \"first-name\", \"type\", \"text\", \"name\", \"firstName\", 3, \"ngModel\", \"ngModelChange\"], [\"firstName\", \"ngModel\"], [\"for\", \"last-name\"], [\"id\", \"last-name\", \"type\", \"text\", \"name\", \"lastName\", 3, \"ngModel\", \"ngModelChange\"], [\"lastName\", \"ngModel\"], [\"for\", \"date-of-birth\"], [\"id\", \"date-of-birth\", \"type\", \"datetime\", \"name\", \"dateOfBirth\", 3, \"ngModel\", \"ngModelChange\"], [\"dateOfBirth\", \"ngModel\"], [\"for\", \"gender\"], [\"id\", \"gender\", \"type\", \"text\", \"name\", \"gender\", 3, \"ngModel\", \"ngModelChange\"], [\"gender\", \"ngModel\"], [\"for\", \"phone-number\"], [\"id\", \"phone-number\", \"type\", \"text\", \"name\", \"phoneNumber\", 3, \"ngModel\", \"ngModelChange\"], [\"phoneNumber\", \"ngModel\"], [\"for\", \"email\"], [\"id\", \"email\", \"type\", \"email\", \"name\", \"email\", 3, \"ngModel\", \"ngModelChange\"], [\"email\", \"ngModel\"], [\"for\", \"street\"], [\"id\", \"street\", \"type\", \"text\", \"name\", \"street\", 3, \"ngModel\", \"ngModelChange\"], [\"street\", \"ngModel\"], [\"for\", \"city\"], [\"id\", \"city\", \"type\", \"text\", \"name\", \"city\", 3, \"ngModel\", \"ngModelChange\"], [\"city\", \"ngModel\"], [\"for\", \"country\"], [\"id\", \"country\", \"type\", \"text\", \"name\", \"country\", 3, \"ngModel\", \"ngModelChange\"], [\"country\", \"ngModel\"], [\"for\", \"zip-code\"], [\"id\", \"zip-code\", \"type\", \"text\", \"name\", \"zipCode\", 3, \"ngModel\", \"ngModelChange\"], [\"zipCode\", \"ngModel\"], [\"for\", \"name\"], [\"id\", \"name\", \"type\", \"text\", \"name\", \"name\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"ngModel\"], [\"for\", \"relationship\"], [\"id\", \"relationship\", \"type\", \"text\", \"name\", \"relationship\", 3, \"ngModel\", \"ngModelChange\"], [\"relationship\", \"ngModel\"], [\"for\", \"phoneNumber\"], [\"id\", \"phoneNumber\", \"type\", \"text\", \"name\", \"phoneNumber\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\"], [3, \"formGroup\", \"submit\"], [\"formArrayName\", \"commonAllergies\"], [4, \"ngFor\", \"ngForOf\"], [\"appointmentInfo\", \"ngForm\"], [\"type\", \"hidden\", \"name\", \"patientId\", 3, \"value\"], [\"for\", \"startTime\"], [\"id\", \"startTime\", \"type\", \"datetime-local\", \"name\", \"startTime\", 3, \"ngModel\", \"ngModelChange\"], [\"startTime\", \"ngModel\"], [\"for\", \"endTime\"], [\"id\", \"endTime\", \"type\", \"datetime-local\", \"name\", \"endTime\", 3, \"ngModel\", \"ngModelChange\"], [\"endTime\", \"ngModel\"], [\"for\", \"healthcareProvider\"], [\"id\", \"healthcareProvider\", \"name\", \"healthcareProviderId\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"appointmentType\"], [\"id\", \"appointmentType\", \"type\", \"text\", \"name\", \"appointmentType\", 3, \"ngModel\", \"ngModelChange\"], [\"appointmentType\", \"ngModel\"], [\"class\", \"table table-striped\", \"aria-labelledby\", \"tableLabel\", 4, \"ngIf\"], [\"type\", \"checkbox\", 3, \"formControl\"], [3, \"value\"], [\"aria-labelledby\", \"tableLabel\", 1, \"table\", \"table-striped\"]],\n  template: function PatientUpdateComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r26 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"form\", 0, 1);\n      i0.ɵɵlistener(\"submit\", function PatientUpdateComponent_Template_form_submit_0_listener() {\n        i0.ɵɵrestoreView(_r26);\n        const _r0 = i0.ɵɵreference(1);\n        return i0.ɵɵresetView(ctx.onSubmit(_r0));\n      });\n      i0.ɵɵelementStart(2, \"div\", 2)(3, \"div\", 3)(4, \"h2\");\n      i0.ɵɵtext(5, \"Personal information\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"label\", 4);\n      i0.ɵɵtext(7, \"First Name: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"input\", 5, 6);\n      i0.ɵɵlistener(\"ngModelChange\", function PatientUpdateComponent_Template_input_ngModelChange_8_listener($event) {\n        return ctx.person.firstName = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"label\", 7);\n      i0.ɵɵtext(11, \"Last Name: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"input\", 8, 9);\n      i0.ɵɵlistener(\"ngModelChange\", function PatientUpdateComponent_Template_input_ngModelChange_12_listener($event) {\n        return ctx.person.lastName = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"label\", 10);\n      i0.ɵɵtext(15, \"Date of birth: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"input\", 11, 12);\n      i0.ɵɵlistener(\"ngModelChange\", function PatientUpdateComponent_Template_input_ngModelChange_16_listener($event) {\n        return ctx.person.dateOfBirth = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"label\", 13);\n      i0.ɵɵtext(19, \"Gender: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"input\", 14, 15);\n      i0.ɵɵlistener(\"ngModelChange\", function PatientUpdateComponent_Template_input_ngModelChange_20_listener($event) {\n        return ctx.person.gender = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"label\", 16);\n      i0.ɵɵtext(23, \"Phone number: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"input\", 17, 18);\n      i0.ɵɵlistener(\"ngModelChange\", function PatientUpdateComponent_Template_input_ngModelChange_24_listener($event) {\n        return ctx.person.phoneNumber = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"label\", 19);\n      i0.ɵɵtext(27, \"Email: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(28, \"input\", 20, 21);\n      i0.ɵɵlistener(\"ngModelChange\", function PatientUpdateComponent_Template_input_ngModelChange_28_listener($event) {\n        return ctx.person.email = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(30, \"div\", 3)(31, \"h2\");\n      i0.ɵɵtext(32, \"Address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"label\", 22);\n      i0.ɵɵtext(34, \"Street: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(35, \"input\", 23, 24);\n      i0.ɵɵlistener(\"ngModelChange\", function PatientUpdateComponent_Template_input_ngModelChange_35_listener($event) {\n        return ctx.address.street = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(37, \"label\", 25);\n      i0.ɵɵtext(38, \"City: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(39, \"input\", 26, 27);\n      i0.ɵɵlistener(\"ngModelChange\", function PatientUpdateComponent_Template_input_ngModelChange_39_listener($event) {\n        return ctx.address.city = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(41, \"label\", 28);\n      i0.ɵɵtext(42, \"Country: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(43, \"input\", 29, 30);\n      i0.ɵɵlistener(\"ngModelChange\", function PatientUpdateComponent_Template_input_ngModelChange_43_listener($event) {\n        return ctx.address.country = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(45, \"label\", 31);\n      i0.ɵɵtext(46, \"Zip Code: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(47, \"input\", 32, 33);\n      i0.ɵɵlistener(\"ngModelChange\", function PatientUpdateComponent_Template_input_ngModelChange_47_listener($event) {\n        return ctx.address.zipCode = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(49, \"div\", 3)(50, \"h2\");\n      i0.ɵɵtext(51, \"Emergency contact\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(52, \"label\", 34);\n      i0.ɵɵtext(53, \"Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(54, \"input\", 35, 36);\n      i0.ɵɵlistener(\"ngModelChange\", function PatientUpdateComponent_Template_input_ngModelChange_54_listener($event) {\n        return ctx.emergencyContact.name = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(56, \"label\", 37);\n      i0.ɵɵtext(57, \"Relationship: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(58, \"input\", 38, 39);\n      i0.ɵɵlistener(\"ngModelChange\", function PatientUpdateComponent_Template_input_ngModelChange_58_listener($event) {\n        return ctx.emergencyContact.relationship = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(60, \"label\", 40);\n      i0.ɵɵtext(61, \"Phone:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(62, \"input\", 41, 18);\n      i0.ɵɵlistener(\"ngModelChange\", function PatientUpdateComponent_Template_input_ngModelChange_62_listener($event) {\n        return ctx.emergencyContact.phoneNumber = $event;\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(64, \"button\", 42);\n      i0.ɵɵtext(65, \"Submit\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(66, \"div\", 2)(67, \"div\", 3)(68, \"form\", 43);\n      i0.ɵɵlistener(\"submit\", function PatientUpdateComponent_Template_form_submit_68_listener() {\n        return ctx.onSubmitAllergies();\n      });\n      i0.ɵɵelementStart(69, \"h2\");\n      i0.ɵɵtext(70, \"Patient's allergies\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(71, \"div\", 44);\n      i0.ɵɵtemplate(72, PatientUpdateComponent_label_72_Template, 3, 2, \"label\", 45);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(73, \"button\", 42);\n      i0.ɵɵtext(74, \"Submit\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(75, \"div\", 3)(76, \"form\", 0, 46);\n      i0.ɵɵlistener(\"submit\", function PatientUpdateComponent_Template_form_submit_76_listener() {\n        i0.ɵɵrestoreView(_r26);\n        const _r15 = i0.ɵɵreference(77);\n        return i0.ɵɵresetView(ctx.onAppointmentSubmit(_r15));\n      });\n      i0.ɵɵelementStart(78, \"h2\");\n      i0.ɵɵtext(79, \"New Appointment\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(80, \"div\");\n      i0.ɵɵelement(81, \"input\", 47);\n      i0.ɵɵelementStart(82, \"label\", 48);\n      i0.ɵɵtext(83, \"Start time: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(84, \"input\", 49, 50);\n      i0.ɵɵlistener(\"ngModelChange\", function PatientUpdateComponent_Template_input_ngModelChange_84_listener($event) {\n        return ctx.appointment.startTime = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(86, \"label\", 51);\n      i0.ɵɵtext(87, \"End time: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(88, \"input\", 52, 53);\n      i0.ɵɵlistener(\"ngModelChange\", function PatientUpdateComponent_Template_input_ngModelChange_88_listener($event) {\n        return ctx.appointment.endTime = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(90, \"label\", 54);\n      i0.ɵɵtext(91, \"Healthcare provider: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(92, \"select\", 55);\n      i0.ɵɵlistener(\"ngModelChange\", function PatientUpdateComponent_Template_select_ngModelChange_92_listener($event) {\n        return ctx.appointment.healthcareProviderId = $event;\n      });\n      i0.ɵɵtemplate(93, PatientUpdateComponent_option_93_Template, 2, 3, \"option\", 56);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(94, \"label\", 57);\n      i0.ɵɵtext(95, \"Appointment Type: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(96, \"input\", 58, 59);\n      i0.ɵɵlistener(\"ngModelChange\", function PatientUpdateComponent_Template_input_ngModelChange_96_listener($event) {\n        return ctx.appointment.appointmentType = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(98, \"button\", 42);\n      i0.ɵɵtext(99, \"Submit\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(100, \"div\", 3)(101, \"h2\");\n      i0.ɵɵtext(102, \"Appointments\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(103, PatientUpdateComponent_table_103_Template, 13, 1, \"table\", 60);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngModel\", ctx.person.firstName);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.person.lastName);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.person.dateOfBirth);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.person.gender);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.person.phoneNumber);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.person.email);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngModel\", ctx.address.street);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.address.city);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.address.country);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.address.zipCode);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngModel\", ctx.emergencyContact.name);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.emergencyContact.relationship);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.emergencyContact.phoneNumber);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"formGroup\", ctx.patientAllergiesForm);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.commonAllergies);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"value\", ctx.appointment.patientId);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.appointment.startTime);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.appointment.endTime);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.appointment.healthcareProviderId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.healthcareProviders);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.appointment.appointmentType);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ctx.patient.appointments.length);\n    }\n  },\n  dependencies: [i4.NgForOf, i4.NgIf, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.CheckboxControlValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.NgModel, i3.NgForm, i3.FormControlDirective, i3.FormGroupDirective, i3.FormArrayName],\n  styles: [\"form[_ngcontent-%COMP%] {\\r\\n    padding-top: 1rem;\\r\\n  }\\r\\n  \\r\\nlabel[_ngcontent-%COMP%] {\\r\\n    display: block;\\r\\n    margin: .5em 0;\\r\\n    font-weight: bold;\\r\\n  }\\r\\n\\r\\nbutton[_ngcontent-%COMP%] {\\r\\n  margin: 1rem;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGF0aWVudC11cGRhdGUvcGF0aWVudC11cGRhdGUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGlCQUFpQjtFQUNuQjs7QUFFRjtJQUNJLGNBQWM7SUFDZCxjQUFjO0lBQ2QsaUJBQWlCO0VBQ25COztBQUVGO0VBQ0UsWUFBWTtBQUNkIiwic291cmNlc0NvbnRlbnQiOlsiZm9ybSB7XHJcbiAgICBwYWRkaW5nLXRvcDogMXJlbTtcclxuICB9XHJcbiAgXHJcbmxhYmVsIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgbWFyZ2luOiAuNWVtIDA7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICB9XHJcblxyXG5idXR0b24ge1xyXG4gIG1hcmdpbjogMXJlbTtcclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AAKA,SAASA,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,OAAO,QAAQ,yBAAyB;AACjD,SAASC,gBAAgB,QAAQ,kCAAkC;AACnE,SAASC,WAAW,QAAQ,6BAA6B;AAGzD,SAASC,OAAO,QAAQ,yBAAyB;;;;;;;;IC8DzCC,6BAA8D;IAC5DA,4BAAoE;IACpEA,YACF;IAAAA,iBAAQ;;;;;;IAFiBA,eAA4C;IAA5CA,sEAA4C;IACnEA,eACF;IADEA,iDACF;;;;;IAqBIA,kCAA2E;IACvEA,YACJ;IAAAA,iBAAS;;;;IAF4CA,uCAAqB;IACtEA,eACJ;IADIA,iGACJ;;;;;IAsBJA,0BAAqD;IAC/CA,YAA2B;IAAAA,iBAAK;IACpCA,0BAAI;IAAAA,YAAyB;IAAAA,iBAAK;IAClCA,0BAAI;IAAAA,YAA0G;IAAAA,iBAAK;IACnHA,0BAAI;IAAAA,YAAiC;IAAAA,iBAAK;;;;IAHtCA,eAA2B;IAA3BA,+CAA2B;IAC3BA,eAAyB;IAAzBA,6CAAyB;IACzBA,eAA0G;IAA1GA,2IAA0G;IAC1GA,eAAiC;IAAjCA,qDAAiC;;;;;IAd3CA,iCAAoG;IAG1FA,0BAAU;IAAAA,iBAAK;IACnBA,0BAAI;IAAAA,wBAAQ;IAAAA,iBAAK;IACjBA,0BAAI;IAAAA,kCAAkB;IAAAA,iBAAK;IAC3BA,0BAAI;IAAAA,iCAAgB;IAAAA,iBAAK;IAG7BA,8BAAO;IACLA,kFAKK;IACPA,iBAAQ;;;;IANsBA,gBAAuB;IAAvBA,sDAAuB;;;ADvG3D,OAAM,MAAOC,sBAAsB;EAYjCC,YACUC,KAAqB,EACrBC,cAAkC,EAClCC,WAAwB;IAFxB,UAAK,GAALF,KAAK;IACL,mBAAc,GAAdC,cAAc;IACd,gBAAW,GAAXC,WAAW;IAbrB,aAAQ,GAAW,EAAE;IACrB,WAAM,GAAW,IAAIV,MAAM,EAAE;IAC7B,YAAO,GAAY,IAAIC,OAAO,EAAE;IAChC,qBAAgB,GAAqB,IAAIC,gBAAgB,EAAE;IAC3D,YAAO,GAAY,IAAIE,OAAO,EAAE;IAChC,oBAAe,GAAc,EAAE;IAC/B,wBAAmB,GAAyB,EAAE;IAE9C,gBAAW,GAAe,IAAID,WAAW,EAAE;EAMxC;EAEHQ,QAAQ;IACN,IAAI,CAACH,KAAK,CAACI,MAAM,CAACC,SAAS,CAAED,MAAM,IAAI;MACrC,IAAI,CAACE,QAAQ,GAAGF,MAAM,CAAC,IAAI,CAAC;MAC5B,IAAI,CAACG,QAAQ,EAAE;IACjB,CAAC,CAAC;EACJ;EAEAA,QAAQ;IACJ,IAAI,CAACN,cAAc,CAACO,cAAc,CAAC,IAAI,CAACF,QAAQ,CAAC,CAACD,SAAS,CAAEI,IAAI,IAAI;MACrE,IAAI,CAACC,MAAM,GAAGD,IAAI,CAACC,MAAM;MACzB,IAAI,CAACC,OAAO,GAAGF,IAAI,CAACE,OAAO;MAC3B,IAAI,CAACC,gBAAgB,GAAGH,IAAI,CAACG,gBAAgB;MAC7C,IAAI,CAACC,OAAO,GAAGJ,IAAI,CAACI,OAAO;MAC3B,IAAI,CAACC,eAAe,GAAGL,IAAI,CAACK,eAAe;MAC3C,IAAI,CAACC,mBAAmB,GAAGN,IAAI,CAACM,mBAAmB;MACnD,IAAI,CAACC,SAAS,EAAE;MAChB,IAAI,CAACC,WAAW,CAACC,SAAS,GAAG,IAAI,CAACL,OAAO,CAACM,EAAE;IAC/C,CAAC,CAAC;EACH;EAEAH,SAAS;IACP,IAAI,CAACI,oBAAoB,GAAG,IAAI,CAAClB,WAAW,CAACmB,KAAK,CAAC;MACjDP,eAAe,EAAE,IAAI,CAACQ,sBAAsB;KAC7C,CAAC;IAEF,IAAI,CAACC,wBAAwB,EAAE;EACjC;EAEAD,sBAAsB;IACpB,MAAME,UAAU,GAAG,IAAI,CAACV,eAAe,CAACW,GAAG,CAACC,OAAO,IAAG;MACpD,OAAO,IAAI,CAACxB,WAAW,CAACyB,OAAO,CAAC,KAAK,CAAC;IACxC,CAAC,CAAC;IAEF,OAAO,IAAI,CAACzB,WAAW,CAAC0B,KAAK,CAACJ,UAAU,CAAC;EAC3C;EAEAD,wBAAwB;IACtB,MAAMM,eAAe,GAAG,IAAI,CAACT,oBAAoB,CAACU,GAAG,CAAC,iBAAiB,CAAc;IAErF,IAAI,CAACjB,OAAO,CAACkB,SAAS,CAACC,OAAO,CAACN,OAAO,IAAG;MACvC,MAAMO,KAAK,GAAG,IAAI,CAACnB,eAAe,CAACoB,SAAS,CAACC,CAAC,IAAIA,CAAC,CAAChB,EAAE,KAAKO,OAAO,CAACP,EAAE,CAAC;MACtE,IAAIc,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBJ,eAAe,CAACO,QAAQ,CAACH,KAAK,CAAC,CAACI,QAAQ,CAAC,IAAI,CAAC;;IAElD,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEV,eAAe,CAACW,KAAK,CAAC;EACzD;EAEAC,yBAAyB,CAACR,KAAa;IACrC,MAAMS,oBAAoB,GAAG,IAAI,CAACtB,oBAAoB,CAACU,GAAG,CAAC,iBAAiB,CAAc;IAC1F,OAAOY,oBAAoB,CAACN,QAAQ,CAACH,KAAK,CAAgB;EAC5D;EAEAU,iBAAiB;IACf,IAAI,CAAC9B,OAAO,CAACkB,SAAS,GAAG,IAAI,CAACX,oBAAoB,CAACoB,KAAK,CAAC1B,eAAe,CACrEW,GAAG,CAAC,CAACmB,OAAgB,EAAEX,KAAa,KAAKW,OAAO,GAAG,IAAI,CAAC9B,eAAe,CAACmB,KAAK,CAAC,GAAG,IAAI,CAAC,CACtFY,MAAM,CAAEnB,OAAuB,IAAyBA,OAAO,KAAK,IAAI,CAAC;IAC5E,IAAI,CAACzB,cAAc,CAAC6C,WAAW,CAAC,IAAI,CAACjC,OAAO,CAAC,CAC5CR,SAAS,CAAC;MACT0C,IAAI,EAAEC,GAAG,IAAG;QACVV,OAAO,CAACC,GAAG,CAACS,GAAG,CAAC;MAClB,CAAC;MACDC,KAAK,EAAEC,GAAG,IAAG;QACXZ,OAAO,CAACC,GAAG,CAACW,GAAG,CAAC;MAClB;KACD,CAAC;EACJ;EAEAC,QAAQ,CAACC,YAAoB;IAC3B,IAAGA,YAAY,CAACC,KAAK,EAAC;MACpB,IAAI,CAACpD,cAAc,CAACqD,UAAU,CAAC,IAAI,CAAC5C,MAAM,GAAE,IAAI,CAACA,MAAM,GAAE,EAAY,CAAC,CACvEL,SAAS,CAAC;QACT0C,IAAI,EAAEC,GAAG,IAAG;UACVV,OAAO,CAACC,GAAG,CAACS,GAAG,CAAC;QAClB,CAAC;QACDC,KAAK,EAAEC,GAAG,IAAG;UACXZ,OAAO,CAACC,GAAG,CAACW,GAAG,CAAC;QAClB;OACD,CAAC;MACF,IAAI,CAACjD,cAAc,CAACsD,WAAW,CAAC,IAAI,CAAC5C,OAAO,GAAE,IAAI,CAACA,OAAO,GAAE,EAAa,CAAC,CACzEN,SAAS,CAAC;QACT0C,IAAI,EAAEC,GAAG,IAAG;UACVV,OAAO,CAACC,GAAG,CAACS,GAAG,CAAC;QAClB,CAAC;QACDC,KAAK,EAAEC,GAAG,IAAG;UACXZ,OAAO,CAACC,GAAG,CAACW,GAAG,CAAC;QAClB;OACD,CAAC;MACF,IAAI,CAACjD,cAAc,CAACuD,oBAAoB,CAAC,IAAI,CAAC5C,gBAAgB,GAAE,IAAI,CAACA,gBAAgB,GAAE,EAAsB,CAAC,CAC7GP,SAAS,CAAC;QACT0C,IAAI,EAAEC,GAAG,IAAG;UACVV,OAAO,CAACC,GAAG,CAACS,GAAG,CAAC;QAClB,CAAC;QACDC,KAAK,EAAEC,GAAG,IAAG;UACXZ,OAAO,CAACC,GAAG,CAACW,GAAG,CAAC;QAClB;OACD,CAAC;;EAEJ;EACAO,mBAAmB,CAACC,eAAuB;IACzC;IACD;IAEC;IACE;IACF;IACA;IACA,IAAI,CAACzD,cAAc,CAAC0D,eAAe,CAAC,IAAI,CAAC1C,WAAW,CAAC,CACpDZ,SAAS,CAAC;MACT0C,IAAI,EAAEC,GAAG,IAAG;QACVV,OAAO,CAACC,GAAG,CAACS,GAAG,CAAC;MAClB,CAAC;MACDC,KAAK,EAAEC,GAAG,IAAG;QACXZ,OAAO,CAACC,GAAG,CAACW,GAAG,CAAC;MAClB;KACD,CAAC;EACJ;;AAtIWpD,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;QAAtBA,sBAAsB;EAAA8D;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;;MClBnCnE,kCAA+D;MAAlCA;QAAAA;QAAA;QAAA,OAAUA,gCAAsB;MAAA,EAAC;MAC5DA,8BAAiB;MAETA,oCAAoB;MAAAA,iBAAK;MAC7BA,gCAAwB;MAAAA,4BAAY;MAAAA,iBAAQ;MAC5CA,mCACiC;MAAjCA;QAAA;MAAA,EAAgC;MADhCA,iBACiC;MAEjCA,iCAAuB;MAAAA,4BAAW;MAAAA,iBAAQ;MAC1CA,oCACgC;MAAhCA;QAAA;MAAA,EAA+B;MAD/BA,iBACgC;MAEhCA,kCAA2B;MAAAA,gCAAe;MAAAA,iBAAQ;MAClDA,sCACmC;MAAnCA;QAAA;MAAA,EAAkC;MADlCA,iBACmC;MAEnCA,kCAAoB;MAAAA,yBAAQ;MAAAA,iBAAQ;MACpCA,sCAC8B;MAA9BA;QAAA;MAAA,EAA6B;MAD7BA,iBAC8B;MAE9BA,kCAA0B;MAAAA,+BAAc;MAAAA,iBAAQ;MAChDA,sCACmC;MAAnCA;QAAA;MAAA,EAAkC;MADlCA,iBACmC;MAEnCA,kCAAmB;MAAAA,wBAAO;MAAAA,iBAAQ;MAClCA,sCAC6B;MAA7BA;QAAA;MAAA,EAA4B;MAD5BA,iBAC6B;MAG/BA,+BAAsB;MACdA,wBAAO;MAAAA,iBAAK;MAEhBA,kCAAoB;MAAAA,yBAAQ;MAAAA,iBAAQ;MACpCA,sCAC+B;MAA/BA;QAAA;MAAA,EAA8B;MAD9BA,iBAC+B;MAE/BA,kCAAkB;MAAAA,uBAAM;MAAAA,iBAAQ;MAChCA,sCAC6B;MAA7BA;QAAA;MAAA,EAA4B;MAD5BA,iBAC6B;MAE7BA,kCAAqB;MAAAA,0BAAS;MAAAA,iBAAQ;MACtCA,sCACgC;MAAhCA;QAAA;MAAA,EAA+B;MAD/BA,iBACgC;MAEhCA,kCAAsB;MAAAA,2BAAU;MAAAA,iBAAQ;MACxCA,sCACgC;MAAhCA;QAAA;MAAA,EAA+B;MAD/BA,iBACgC;MAGpCA,+BAAsB;MAChBA,kCAAiB;MAAAA,iBAAK;MAE1BA,kCAAkB;MAAAA,sBAAK;MAAAA,iBAAQ;MAC/BA,sCACsC;MAAtCA;QAAA;MAAA,EAAqC;MADrCA,iBACsC;MAEtCA,kCAA0B;MAAAA,+BAAc;MAAAA,iBAAQ;MAChDA,sCAC8C;MAA9CA;QAAA;MAAA,EAA6C;MAD7CA,iBAC8C;MAE9CA,kCAAyB;MAAAA,uBAAM;MAAAA,iBAAQ;MACvCA,sCAC6C;MAA7CA;QAAA;MAAA,EAA4C;MAD5CA,iBAC6C;MAIjDA,mCAA8C;MAAAA,uBAAM;MAAAA,iBAAS;MAE/DA,+BAAiB;MAE4BA;QAAA,OAAUoE,uBAAmB;MAAA,EAAC;MACrEpE,2BAAI;MAAAA,oCAAmB;MAAAA,iBAAK;MAC5BA,gCAAqC;MACnCA,8EAGQ;MACVA,iBAAM;MAENA,mCAA8C;MAAAA,uBAAM;MAAAA,iBAAS;MAGjEA,+BAAsB;MACYA;QAAAA;QAAA;QAAA,OAAUA,4CAAoC;MAAA,EAAC;MAC7EA,2BAAI;MAAAA,gCAAe;MAAAA,iBAAK;MACxBA,4BAAK;MACHA,6BAAwE;MACxEA,kCAAuB;MAAAA,6BAAY;MAAAA,iBAAQ;MAC3CA,sCACsC;MAAtCA;QAAA;MAAA,EAAqC;MADrCA,iBACsC;MAEtCA,kCAAqB;MAAAA,2BAAU;MAAAA,iBAAQ;MACvCA,sCACoC;MAApCA;QAAA;MAAA,EAAmC;MADnCA,iBACoC;MAEpCA,kCAAgC;MAAAA,sCAAqB;MAAAA,iBAAQ;MAC7DA,mCAA2G;MAA/CA;QAAA;MAAA,EAA8C;MACtGA,gFAES;MACbA,iBAAS;MAETA,kCAA6B;MAAAA,mCAAkB;MAAAA,iBAAQ;MACvDA,sCAC4C;MAA5CA;QAAA;MAAA,EAA2C;MAD3CA,iBAC4C;MAE9CA,mCAA8C;MAAAA,uBAAM;MAAAA,iBAAS;MAGjEA,gCAAsB;MAChBA,8BAAY;MAAAA,iBAAK;MACrBA,iFAiBQ;MACVA,iBAAM;;;MA3HFA,eAAgC;MAAhCA,8CAAgC;MAIhCA,eAA+B;MAA/BA,6CAA+B;MAI/BA,eAAkC;MAAlCA,gDAAkC;MAIlCA,eAA6B;MAA7BA,2CAA6B;MAI7BA,eAAkC;MAAlCA,gDAAkC;MAIlCA,eAA4B;MAA5BA,0CAA4B;MAQ1BA,eAA8B;MAA9BA,4CAA8B;MAI9BA,eAA4B;MAA5BA,0CAA4B;MAI5BA,eAA+B;MAA/BA,6CAA+B;MAI/BA,eAA+B;MAA/BA,6CAA+B;MAQjCA,eAAqC;MAArCA,mDAAqC;MAIrCA,eAA6C;MAA7CA,2DAA6C;MAI7CA,eAA4C;MAA5CA,0DAA4C;MAQxCA,eAAkC;MAAlCA,oDAAkC;MAGTA,eAAoB;MAApBA,6CAAoB;MAaTA,eAAiC;MAAjCA,iDAAiC;MAGvEA,eAAqC;MAArCA,mDAAqC;MAIrCA,eAAmC;MAAnCA,iDAAmC;MAGyBA,eAA8C;MAA9CA,8DAA8C;MACzEA,eAAsB;MAAtBA,iDAAsB;MAOvDA,eAA2C;MAA3CA,yDAA2C;MAOkBA,eAAiC;MAAjCA,sDAAiC","names":["Person","Address","EmergencyContact","Appointment","Patient","i0","PatientUpdateComponent","constructor","route","patientService","formBuilder","ngOnInit","params","subscribe","personId","loadData","getPatientData","data","person","address","emergencyContact","patient","commonAllergies","healthcareProviders","buildForm","appointment","patientId","id","patientAllergiesForm","group","buildAllergyCheckboxes","setInitialCheckboxValues","checkboxes","map","allergy","control","array","allergyControls","get","allergies","forEach","index","findIndex","a","controls","setValue","console","log","value","getCommonAllergiesControl","commonAllergiesArray","onSubmitAllergies","checked","filter","editPatient","next","res","error","err","onSubmit","personalInfo","valid","editPerson","editAddress","editEmergencyContact","onAppointmentSubmit","appointmentInfo","postAppointment","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Kateryna_Yavna\\source\\repos\\HealthHubPro\\HealthHubPro\\HealthHub2\\HealthHubPro\\ClientApp\\src\\app\\patient-update\\patient-update.component.ts","C:\\Users\\Kateryna_Yavna\\source\\repos\\HealthHubPro\\HealthHubPro\\HealthHub2\\HealthHubPro\\ClientApp\\src\\app\\patient-update\\patient-update.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, FormArray, NgForm, FormControl } from '@angular/forms';\nimport { Allergy } from '../models/Allergy.model';\nimport { HealthcareProvider } from '../models/HealthcareProvider.model';\nimport { ActivatedRoute } from '@angular/router';\nimport { Person } from '../models/Person.model';\nimport { Address } from '../models/Address.model';\nimport { EmergencyContact } from '../models/EmergencyContact.model';\nimport { Appointment } from '../models/Appointment.model';\nimport { Prescription } from '../models/Prescription.model';\nimport { ProfileFormService } from '../services/profile-form.service';\nimport { Patient } from '../models/Patient.model';\n\n@Component({\n  selector: 'app-patient-update',\n  templateUrl: './patient-update.component.html',\n  styleUrls: ['./patient-update.component.css']\n})\nexport class PatientUpdateComponent implements OnInit {\n\n  personId: string = \"\";\n  person: Person = new Person();\n  address: Address = new Address();\n  emergencyContact: EmergencyContact = new EmergencyContact();\n  patient: Patient = new Patient();\n  commonAllergies: Allergy[] = [];\n  healthcareProviders: HealthcareProvider[] = [];\n  patientAllergiesForm!: FormGroup;\n  appointment: Appointment= new Appointment();\n\n  constructor(\n    private route: ActivatedRoute,\n    private patientService: ProfileFormService,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.subscribe((params) => {\n      this.personId = params['id'];\n      this.loadData();\n    });\n  }\n\n  loadData() {\n      this.patientService.getPatientData(this.personId).subscribe((data) => {\n      this.person = data.person;\n      this.address = data.address;\n      this.emergencyContact = data.emergencyContact;\n      this.patient = data.patient;\n      this.commonAllergies = data.commonAllergies;\n      this.healthcareProviders = data.healthcareProviders;\n      this.buildForm();\n      this.appointment.patientId = this.patient.id;\n   });\n  }\n\n  buildForm() {\n    this.patientAllergiesForm = this.formBuilder.group({\n      commonAllergies: this.buildAllergyCheckboxes()\n    });\n\n    this.setInitialCheckboxValues();\n  }\n\n  buildAllergyCheckboxes() {\n    const checkboxes = this.commonAllergies.map(allergy => {\n      return this.formBuilder.control(false); \n    });\n\n    return this.formBuilder.array(checkboxes);\n  }\n\n  setInitialCheckboxValues() {\n    const allergyControls = this.patientAllergiesForm.get('commonAllergies') as FormArray;\n\n    this.patient.allergies.forEach(allergy => {\n      const index = this.commonAllergies.findIndex(a => a.id === allergy.id);\n      if (index !== -1) {\n        allergyControls.controls[index].setValue(true);\n      }\n    });\n    console.log('Allergy Controls:', allergyControls.value);\n  }\n\n  getCommonAllergiesControl(index: number): FormControl {\n    const commonAllergiesArray = this.patientAllergiesForm.get('commonAllergies') as FormArray;\n    return commonAllergiesArray.controls[index] as FormControl;\n  }\n\n  onSubmitAllergies() {\n    this.patient.allergies = this.patientAllergiesForm.value.commonAllergies\n      .map((checked: boolean, index: number) => checked ? this.commonAllergies[index] : null)\n      .filter((allergy: Allergy | null): allergy is Allergy => allergy !== null);\n    this.patientService.editPatient(this.patient)\n    .subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n\n  onSubmit(personalInfo: NgForm) {\n    if(personalInfo.valid){\n      this.patientService.editPerson(this.person? this.person: {} as Person)\n    .subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n    this.patientService.editAddress(this.address? this.address: {} as Address)\n    .subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n    this.patientService.editEmergencyContact(this.emergencyContact? this.emergencyContact: {} as EmergencyContact)\n    .subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n    }    \n  }\n  onAppointmentSubmit(appointmentInfo: NgForm){\n    //const selectedProviderId = appointmentInfo.value.healthcareProviderId;\n   // const selectedProvider = this.healthcareProviders.find(provider => provider.id === selectedProviderId);\n  \n    //if (selectedProvider) {\n      //this.appointment.healthcareProvider = selectedProvider;\n    //}\n    //this.appointment.patient = this.patient;\n    this.patientService.postAppointment(this.appointment)\n    .subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n}\n","<form #personalInfo = ngForm (submit)=\"onSubmit(personalInfo)\">\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <h2>Personal information</h2>\n      <label for=\"first-name\">First Name: </label>\n      <input id=\"first-name\" #firstName = \"ngModel\" type=\"text\" name=\"firstName\" \n      [(ngModel)] = \"person.firstName\">\n\n      <label for=\"last-name\">Last Name: </label>\n      <input id=\"last-name\" #lastName = \"ngModel\" type=\"text\" name=\"lastName\" \n      [(ngModel)] = \"person.lastName\">\n\n      <label for=\"date-of-birth\">Date of birth: </label>\n      <input id=\"date-of-birth\" #dateOfBirth = \"ngModel\" type=\"datetime\" name=\"dateOfBirth\" \n      [(ngModel)] = \"person.dateOfBirth\">\n\n      <label for=\"gender\">Gender: </label>\n      <input id=\"gender\" #gender = \"ngModel\" type=\"text\" name=\"gender\"\n      [(ngModel)] = \"person.gender\">\n\n      <label for=\"phone-number\">Phone number: </label>\n      <input id=\"phone-number\" #phoneNumber = \"ngModel\" type=\"text\" name=\"phoneNumber\"\n      [(ngModel)] = \"person.phoneNumber\">\n\n      <label for=\"email\">Email: </label>\n      <input id=\"email\" #email = \"ngModel\" type=\"email\" name=\"email\" \n      [(ngModel)] = \"person.email\">\n    </div>\n\n    <div class=\"col-md-4\">\n        <h2>Address</h2>\n\n        <label for=\"street\">Street: </label>\n        <input id=\"street\" #street = \"ngModel\" type=\"text\" name=\"street\" \n        [(ngModel)] = \"address.street\">\n\n        <label for=\"city\">City: </label>\n        <input id=\"city\" #city = \"ngModel\" type=\"text\" name=\"city\" \n        [(ngModel)] = \"address.city\">\n\n        <label for=\"country\">Country: </label>\n        <input id=\"country\" #country = \"ngModel\" type=\"text\" name=\"country\"\n        [(ngModel)] = \"address.country\">\n\n        <label for=\"zip-code\">Zip Code: </label>\n        <input id=\"zip-code\" #zipCode = \"ngModel\" type=\"text\" name=\"zipCode\" \n        [(ngModel)] = \"address.zipCode\">     \n    </div>\n\n    <div class=\"col-md-4\">\n      <h2>Emergency contact</h2>\n\n      <label for=\"name\">Name:</label>\n      <input id=\"name\" #name = \"ngModel\" type=\"text\" name=\"name\" \n      [(ngModel)] = \"emergencyContact.name\">\n\n      <label for=\"relationship\">Relationship: </label>\n      <input id=\"relationship\" #relationship = \"ngModel\" type=\"text\" name=\"relationship\" \n      [(ngModel)] = \"emergencyContact.relationship\">\n\n      <label for=\"phoneNumber\">Phone:</label>\n      <input id=\"phoneNumber\" #phoneNumber = \"ngModel\" type=\"text\" name=\"phoneNumber\" \n      [(ngModel)] = \"emergencyContact.phoneNumber\">\n    </div>\n  </div>\n    \n  <button class=\"btn btn-success\" type=\"submit\">Submit</button>\n</form>\n<div class=\"row\">\n  <div class=\"col-md-4\">\n    <form [formGroup]=\"patientAllergiesForm\" (submit)=\"onSubmitAllergies()\">\n      <h2>Patient's allergies</h2>\n      <div formArrayName=\"commonAllergies\">\n        <label *ngFor=\"let allergy of commonAllergies; let i = index\">\n          <input type=\"checkbox\" [formControl]=\"getCommonAllergiesControl(i)\">\n          {{ allergy.name }}\n        </label>\n      </div>\n\n      <button class=\"btn btn-success\" type=\"submit\">Submit</button>\n    </form>\n  </div>\n  <div class=\"col-md-4\">   \n    <form #appointmentInfo = ngForm (submit)=\"onAppointmentSubmit(appointmentInfo)\">\n      <h2>New Appointment</h2>\n      <div>\n        <input type=\"hidden\" name=\"patientId\" [value] = \"appointment.patientId\">\n        <label for=\"startTime\">Start time: </label>\n        <input id=\"startTime\" #startTime = \"ngModel\" type=\"datetime-local\" name=\"startTime\" \n        [(ngModel)] = \"appointment.startTime\">\n\n        <label for=\"endTime\">End time: </label>\n        <input id=\"endTime\" #endTime = \"ngModel\" type=\"datetime-local\" name=\"endTime\" \n        [(ngModel)] = \"appointment.endTime\">\n\n        <label for=\"healthcareProvider\">Healthcare provider: </label>\n        <select id=\"healthcareProvider\" name=\"healthcareProviderId\" [(ngModel)]=\"appointment.healthcareProviderId\">\n            <option *ngFor=\"let provider of healthcareProviders\" [value]=\"provider.id\">\n                {{provider.person.firstName}}  {{provider.person.lastName}}\n            </option>\n        </select>\n\n        <label for=\"appointmentType\">Appointment Type: </label>\n        <input id=\"appointmentType\" #appointmentType = \"ngModel\" type=\"text\" name=\"appointmentType\"\n        [(ngModel)] = \"appointment.appointmentType\">\n      </div>\n      <button class=\"btn btn-success\" type=\"submit\">Submit</button>\n    </form>\n  </div>\n  <div class=\"col-md-4\">\n    <h2>Appointments</h2>\n    <table class='table table-striped' aria-labelledby=\"tableLabel\" *ngIf=\"patient.appointments.length\">\n      <thead>\n        <tr>\n          <th>Start time</th>\n          <th>End time</th>\n          <th>HealthcareProvider</th>\n          <th>Appointment type</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let appointment of patient.appointments\">\n          <td>{{ appointment.startTime }}</td>\n          <td>{{ appointment.endTime }}</td>\n          <td>{{ appointment.healthcareProvider.person.firstName }} {{ appointment.healthcareProvider.person.lastName }}</td>\n          <td>{{ appointment.appointmentType }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}