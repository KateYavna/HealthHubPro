{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet PatientUpdateComponent = class PatientUpdateComponent {\n  constructor(route, patientService, formBuilder) {\n    this.route = route;\n    this.patientService = patientService;\n    this.formBuilder = formBuilder;\n    this.personId = \"\";\n    this.commonAllergies = [];\n    this.healthcareProviders = [];\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.personId = params['id'];\n      this.loadData();\n    });\n  }\n  loadData() {\n    this.patientService.getPatientData(this.personId).subscribe(data => {\n      this.person = data.person;\n      this.address = data.address;\n      this.emergencyContact = data.emergencyContact;\n      this.patient = data.patient;\n      this.commonAllergies = data.commonAllergies;\n      this.healthcareProviders = data.healthcareProviders;\n      this.buildForm();\n    });\n  }\n  buildForm() {\n    this.patientAllergiesForm = this.formBuilder.group({\n      commonAllergies: this.buildAllergyCheckboxes()\n    });\n    this.setInitialCheckboxValues();\n  }\n  buildAllergyCheckboxes() {\n    const checkboxes = this.commonAllergies.map(allergy => {\n      return this.formBuilder.control(false);\n    });\n    return this.formBuilder.array(checkboxes);\n  }\n  setInitialCheckboxValues() {\n    const allergyControls = this.patientAllergiesForm.get('commonAllergies');\n    this.patient.allergies.forEach(allergy => {\n      const index = this.commonAllergies.findIndex(a => a.id === allergy.id);\n      if (index !== -1) {\n        allergyControls.controls[index].setValue(true);\n      }\n    });\n    console.log('Allergy Controls:', allergyControls.value);\n  }\n  getCommonAllergiesControl(index) {\n    const commonAllergiesArray = this.patientAllergiesForm.get('commonAllergies');\n    return commonAllergiesArray.controls[index];\n  }\n  onSubmitAllergies() {\n    this.patient.allergies = this.patientAllergiesForm.value.commonAllergies.map((checked, index) => checked ? this.commonAllergies[index] : null).filter(allergy => allergy !== null);\n    this.patientService.editPatient(this.patient).subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  onSubmit(personalInfo) {\n    if (personalInfo.valid) {\n      this.patientService.editPerson(this.person ? this.person : {}).subscribe({\n        next: res => {\n          console.log(res);\n        },\n        error: err => {\n          console.log(err);\n        }\n      });\n      this.patientService.editAddress(this.address ? this.address : {}).subscribe({\n        next: res => {\n          console.log(res);\n        },\n        error: err => {\n          console.log(err);\n        }\n      });\n      this.patientService.editEmergencyContact(this.emergencyContact ? this.emergencyContact : {}).subscribe({\n        next: res => {\n          console.log(res);\n        },\n        error: err => {\n          console.log(err);\n        }\n      });\n    }\n  }\n  onAppointmentSubmit(appointmentInfo) {}\n};\nPatientUpdateComponent = __decorate([Component({\n  selector: 'app-patient-update',\n  templateUrl: './patient-update.component.html',\n  styleUrls: ['./patient-update.component.css']\n})], PatientUpdateComponent);\nexport { PatientUpdateComponent };","map":{"version":3,"mappings":"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","names":["Component","PatientUpdateComponent","constructor","route","patientService","formBuilder","ngOnInit","params","subscribe","personId","loadData","getPatientData","data","person","address","emergencyContact","patient","commonAllergies","healthcareProviders","buildForm","patientAllergiesForm","group","buildAllergyCheckboxes","setInitialCheckboxValues","checkboxes","map","allergy","control","array","allergyControls","get","allergies","forEach","index","findIndex","a","id","controls","setValue","console","log","value","getCommonAllergiesControl","commonAllergiesArray","onSubmitAllergies","checked","filter","editPatient","next","res","error","err","onSubmit","personalInfo","valid","editPerson","editAddress","editEmergencyContact","onAppointmentSubmit","appointmentInfo","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Kateryna_Yavna\\source\\repos\\HealthHubPro\\HealthHubPro\\HealthHub2\\HealthHubPro\\ClientApp\\src\\app\\patient-update\\patient-update.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, FormArray, NgForm, FormControl } from '@angular/forms';\nimport { Allergy } from '../models/Allergy.model';\nimport { HealthcareProvider } from '../models/HealthcareProvider.model';\nimport { ActivatedRoute } from '@angular/router';\nimport { Person } from '../models/Person.model';\nimport { Address } from '../models/Address.model';\nimport { EmergencyContact } from '../models/EmergencyContact.model';\nimport { Appointment } from '../models/Appointment.model';\nimport { Prescription } from '../models/Prescription.model';\nimport { ProfileFormService } from '../services/profile-form.service';\nimport { Patient } from '../models/Patient.model';\n\n@Component({\n  selector: 'app-patient-update',\n  templateUrl: './patient-update.component.html',\n  styleUrls: ['./patient-update.component.css']\n})\nexport class PatientUpdateComponent implements OnInit {\n\n  personId: string = \"\";\n  person!: Person;\n  address!: Address;\n  emergencyContact!: EmergencyContact;\n  patient!: Patient;\n  commonAllergies: Allergy[] = [];\n  healthcareProviders: HealthcareProvider[] = [];\n  patientAllergiesForm!: FormGroup;\n  appointment!: Appointment;\n\n  constructor(\n    private route: ActivatedRoute,\n    private patientService: ProfileFormService,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.subscribe((params) => {\n      this.personId = params['id'];\n      this.loadData();\n    });\n  }\n\n  loadData() {\n      this.patientService.getPatientData(this.personId).subscribe((data) => {\n      this.person = data.person;\n      this.address = data.address;\n      this.emergencyContact = data.emergencyContact;\n      this.patient = data.patient;\n      this.commonAllergies = data.commonAllergies;\n      this.healthcareProviders = data.healthcareProviders;\n      this.buildForm();\n   });\n  }\n\n  buildForm() {\n    this.patientAllergiesForm = this.formBuilder.group({\n      commonAllergies: this.buildAllergyCheckboxes()\n    });\n\n    this.setInitialCheckboxValues();\n  }\n\n  buildAllergyCheckboxes() {\n    const checkboxes = this.commonAllergies.map(allergy => {\n      return this.formBuilder.control(false); \n    });\n\n    return this.formBuilder.array(checkboxes);\n  }\n\n  setInitialCheckboxValues() {\n    const allergyControls = this.patientAllergiesForm.get('commonAllergies') as FormArray;\n\n    this.patient.allergies.forEach(allergy => {\n      const index = this.commonAllergies.findIndex(a => a.id === allergy.id);\n      if (index !== -1) {\n        allergyControls.controls[index].setValue(true);\n      }\n    });\n    console.log('Allergy Controls:', allergyControls.value);\n  }\n\n  getCommonAllergiesControl(index: number): FormControl {\n    const commonAllergiesArray = this.patientAllergiesForm.get('commonAllergies') as FormArray;\n    return commonAllergiesArray.controls[index] as FormControl;\n  }\n\n  onSubmitAllergies() {\n    this.patient.allergies = this.patientAllergiesForm.value.commonAllergies\n      .map((checked: boolean, index: number) => checked ? this.commonAllergies[index] : null)\n      .filter((allergy: Allergy | null): allergy is Allergy => allergy !== null);\n    this.patientService.editPatient(this.patient)\n    .subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n\n  onSubmit(personalInfo: NgForm) {\n    if(personalInfo.valid){\n      this.patientService.editPerson(this.person? this.person: {} as Person)\n    .subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n    this.patientService.editAddress(this.address? this.address: {} as Address)\n    .subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n    this.patientService.editEmergencyContact(this.emergencyContact? this.emergencyContact: {} as EmergencyContact)\n    .subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n    }    \n  }\n  onAppointmentSubmit(appointmentInfo: NgForm){\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}