{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Person } from '../models/Person.model';\nimport { Address } from '../models/Address.model';\nimport { EmergencyContact } from '../models/EmergencyContact.model';\nimport { AppointmentPostModel } from '../models/AppointmentPostModel.model';\nimport { PrescriptionPostModel } from '../models/PrescriptionPostModel.model';\nimport { Patient } from '../models/Patient.model';\nimport { PrescriptionHistory } from '../models/PrescriptionHistory.model';\nlet PatientUpdateComponent = class PatientUpdateComponent {\n  constructor(route, patientService, formBuilder) {\n    this.route = route;\n    this.patientService = patientService;\n    this.formBuilder = formBuilder;\n    this.personId = \"\";\n    this.person = new Person();\n    this.address = new Address();\n    this.emergencyContact = new EmergencyContact();\n    this.patient = new Patient();\n    this.commonAllergies = [];\n    this.healthcareProviders = [];\n    this.appointments = [];\n    this.prescriptions = [];\n    this.prescriptionHistories = [];\n    this.appointment = new AppointmentPostModel();\n    this.prescription = new PrescriptionPostModel();\n    this.prescriptionHistory = new PrescriptionHistory();\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.personId = params['id'];\n      this.loadData();\n    });\n  }\n  loadData() {\n    this.patientService.getPatientData(this.personId).subscribe(data => {\n      this.person = data.person;\n      this.address = data.address;\n      this.emergencyContact = data.emergencyContact;\n      this.patient = data.patient;\n      this.commonAllergies = data.commonAllergies;\n      this.healthcareProviders = data.healthcareProviders;\n      this.appointments = data.appointments;\n      this.prescriptions = data.prescriptions;\n      this.buildForm();\n      this.appointment.patientId = this.patient.id;\n      this.prescription.patientId = this.patient.id;\n    });\n  }\n  buildForm() {\n    this.patientAllergiesForm = this.formBuilder.group({\n      commonAllergies: this.buildAllergyCheckboxes()\n    });\n    this.setInitialCheckboxValues();\n  }\n  buildAllergyCheckboxes() {\n    const checkboxes = this.commonAllergies.map(allergy => {\n      return this.formBuilder.control(false);\n    });\n    return this.formBuilder.array(checkboxes);\n  }\n  setInitialCheckboxValues() {\n    const allergyControls = this.patientAllergiesForm.get('commonAllergies');\n    this.patient.allergies.forEach(allergy => {\n      const index = this.commonAllergies.findIndex(a => a.id === allergy.id);\n      if (index !== -1) {\n        allergyControls.controls[index].setValue(true);\n      }\n    });\n    console.log('Allergy Controls:', allergyControls.value);\n  }\n  getCommonAllergiesControl(index) {\n    const commonAllergiesArray = this.patientAllergiesForm.get('commonAllergies');\n    return commonAllergiesArray.controls[index];\n  }\n  onSubmitAllergies() {\n    this.patient.allergies = this.patientAllergiesForm.value.commonAllergies.map((checked, index) => checked ? this.commonAllergies[index] : null).filter(allergy => allergy !== null);\n    this.patientService.editPatient(this.patient).subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  onSubmit(personalInfo) {\n    if (personalInfo.valid) {\n      this.patientService.editPerson(this.person ? this.person : {}).subscribe({\n        next: res => {\n          console.log(res);\n        },\n        error: err => {\n          console.log(err);\n        }\n      });\n      this.patientService.editAddress(this.address ? this.address : {}).subscribe({\n        next: res => {\n          console.log(res);\n        },\n        error: err => {\n          console.log(err);\n        }\n      });\n      this.patientService.editEmergencyContact(this.emergencyContact ? this.emergencyContact : {}).subscribe({\n        next: res => {\n          console.log(res);\n        },\n        error: err => {\n          console.log(err);\n        }\n      });\n    }\n  }\n  onAppointmentSubmit(appointmentInfo) {\n    if (this.appointment.id == \"00000000-0000-0000-0000-000000000000\") {\n      this.insertAppointment(appointmentInfo);\n    } else {\n      this.updateAppointment(appointmentInfo);\n    }\n  }\n  insertAppointment(appointmentInfo) {\n    this.patientService.postAppointment(this.appointment).subscribe({\n      next: res => {\n        this.appointments = res;\n        this.resetAppointmentForm(appointmentInfo);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  updateAppointment(appointmentInfo) {\n    this.patientService.editAppointment(this.appointment).subscribe({\n      next: res => {\n        this.appointments = res;\n        this.resetAppointmentForm(appointmentInfo);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  deleteAppointment(id) {\n    this.patientService.deleteAppointment(id).subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  populateAppointmentForm(appointment) {\n    this.appointment = Object.assign({}, appointment);\n  }\n  resetAppointmentForm(appointmentInfo) {\n    appointmentInfo.form.reset();\n    this.appointment = new AppointmentPostModel();\n  }\n  onPrescriptionSubmit(prescriptionInfo) {\n    if (this.prescription.id == \"00000000-0000-0000-0000-000000000000\") {\n      this.insertPrescription(prescriptionInfo);\n    } else {\n      this.updatePrescription(prescriptionInfo);\n    }\n  }\n  insertPrescription(prescriptionInfo) {\n    this.patientService.postPrescription(this.prescription).subscribe({\n      next: res => {\n        this.prescriptions = res;\n        this.resetPrescriptionForm(prescriptionInfo);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  updatePrescription(prescriptionInfo) {\n    this.patientService.editPrescription(this.prescription).subscribe({\n      next: res => {\n        this.prescriptions = res;\n        this.resetPrescriptionForm(prescriptionInfo);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  deletePrescription(id) {\n    this.patientService.deletePrescription(id).subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  populatePrescriptionForm(prescription) {\n    this.prescription = Object.assign({}, prescription);\n  }\n  resetPrescriptionForm(prescriptionInfo) {\n    prescriptionInfo.form.reset();\n    this.prescription = new PrescriptionPostModel();\n  }\n  onPrescriptionHistorySubmit(prescriptionHistoryInfo) {\n    if (this.prescriptionHistory.id == \"00000000-0000-0000-0000-000000000000\") {\n      this.insertPrescriptionHistory(prescriptionHistoryInfo);\n    } else {\n      this.updatePrescriptionHistory(prescriptionHistoryInfo);\n    }\n  }\n  insertPrescriptionHistory(prescriptionHistoryInfo) {\n    this.prescriptionHistory.prescriptionId = this.prescription.id;\n    this.patientService.postPrescriptionHistory(this.prescriptionHistory).subscribe({\n      next: res => {\n        this.prescriptionHistories = res;\n        this.resetPrescriptionHistoryForm(prescriptionHistoryInfo);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  updatePrescriptionHistory(prescriptionHistoryInfo) {\n    this.prescriptionHistory.prescriptionId = this.prescription.id;\n    this.patientService.editPrescriptionHistory(this.prescriptionHistory).subscribe({\n      next: res => {\n        this.prescriptionHistories = res;\n        this.resetPrescriptionHistoryForm(prescriptionHistoryInfo);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  deletePrescriptionHistory(id) {\n    this.patientService.deletePrescriptionHistory(id).subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  populatePrescriptionHistoryForm(prescriptionHistory) {\n    this.prescriptionHistory = Object.assign({}, prescriptionHistory);\n  }\n  resetPrescriptionHistoryForm(prescriptionHistoryInfo) {\n    prescriptionHistoryInfo.form.reset();\n    this.prescriptionHistory = new PrescriptionHistory();\n  }\n  isPrescriptionIdEmpty() {\n    return this.prescription.id === \"00000000-0000-0000-0000-000000000000\";\n  }\n};\nPatientUpdateComponent = __decorate([Component({\n  selector: 'app-patient-update',\n  templateUrl: './patient-update.component.html',\n  styleUrls: ['./patient-update.component.css']\n})], PatientUpdateComponent);\nexport { PatientUpdateComponent };","map":{"version":3,"mappings":"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","names":["Component","Person","Address","EmergencyContact","AppointmentPostModel","PrescriptionPostModel","Patient","PrescriptionHistory","PatientUpdateComponent","constructor","route","patientService","formBuilder","ngOnInit","params","subscribe","personId","loadData","getPatientData","data","person","address","emergencyContact","patient","commonAllergies","healthcareProviders","appointments","prescriptions","buildForm","appointment","patientId","id","prescription","patientAllergiesForm","group","buildAllergyCheckboxes","setInitialCheckboxValues","checkboxes","map","allergy","control","array","allergyControls","get","allergies","forEach","index","findIndex","a","controls","setValue","console","log","value","getCommonAllergiesControl","commonAllergiesArray","onSubmitAllergies","checked","filter","editPatient","next","res","error","err","onSubmit","personalInfo","valid","editPerson","editAddress","editEmergencyContact","onAppointmentSubmit","appointmentInfo","insertAppointment","updateAppointment","postAppointment","resetAppointmentForm","editAppointment","deleteAppointment","populateAppointmentForm","Object","assign","form","reset","onPrescriptionSubmit","prescriptionInfo","insertPrescription","updatePrescription","postPrescription","resetPrescriptionForm","editPrescription","deletePrescription","populatePrescriptionForm","onPrescriptionHistorySubmit","prescriptionHistoryInfo","prescriptionHistory","insertPrescriptionHistory","updatePrescriptionHistory","prescriptionId","postPrescriptionHistory","prescriptionHistories","resetPrescriptionHistoryForm","editPrescriptionHistory","deletePrescriptionHistory","populatePrescriptionHistoryForm","isPrescriptionIdEmpty","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Kateryna_Yavna\\source\\repos\\HealthHubPro\\HealthHubPro\\HealthHub2\\HealthHubPro\\ClientApp\\src\\app\\patient-update\\patient-update.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, FormArray, NgForm, FormControl } from '@angular/forms';\nimport { Allergy } from '../models/Allergy.model';\nimport { HealthcareProvider } from '../models/HealthcareProvider.model';\nimport { ActivatedRoute } from '@angular/router';\nimport { Person } from '../models/Person.model';\nimport { Address } from '../models/Address.model';\nimport { EmergencyContact } from '../models/EmergencyContact.model';\nimport { AppointmentPostModel } from '../models/AppointmentPostModel.model';\nimport { PrescriptionPostModel } from '../models/PrescriptionPostModel.model';\nimport { ProfileFormService } from '../services/profile-form.service';\nimport { Patient } from '../models/Patient.model';\nimport { Appointment } from '../models/Appointment.model';\nimport { PrescriptionHistory } from '../models/PrescriptionHistory.model';\nimport { Prescription } from '../models/Prescription.model';\n\n@Component({\n  selector: 'app-patient-update',\n  templateUrl: './patient-update.component.html',\n  styleUrls: ['./patient-update.component.css']\n})\nexport class PatientUpdateComponent implements OnInit {\n\n  personId: string = \"\";\n  person: Person = new Person();\n  address: Address = new Address();\n  emergencyContact: EmergencyContact = new EmergencyContact();\n  patient: Patient = new Patient();\n  commonAllergies: Allergy[] = [];\n  healthcareProviders: HealthcareProvider[] = [];\n  appointments: Appointment[] = [];\n  prescriptions: Prescription[] = [];\n  prescriptionHistories: PrescriptionHistory[] = [];\n  patientAllergiesForm!: FormGroup;\n  appointment: AppointmentPostModel= new AppointmentPostModel();\n  prescription: PrescriptionPostModel = new PrescriptionPostModel();\n  prescriptionHistory: PrescriptionHistory = new PrescriptionHistory();\n\n  constructor(\n    private route: ActivatedRoute,\n    private patientService: ProfileFormService,\n    private formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.subscribe((params) => {\n      this.personId = params['id'];\n      this.loadData();\n    });\n  }\n\n  loadData() {\n      this.patientService.getPatientData(this.personId).subscribe((data) => {\n      this.person = data.person;\n      this.address = data.address;\n      this.emergencyContact = data.emergencyContact;\n      this.patient = data.patient;\n      this.commonAllergies = data.commonAllergies;\n      this.healthcareProviders = data.healthcareProviders;\n      this.appointments = data.appointments;\n      this.prescriptions = data.prescriptions;\n      this.buildForm();\n      this.appointment.patientId = this.patient.id;\n      this.prescription.patientId = this.patient.id;\n   });\n  }\n\n  buildForm() {\n    this.patientAllergiesForm = this.formBuilder.group({\n      commonAllergies: this.buildAllergyCheckboxes()\n    });\n\n    this.setInitialCheckboxValues();\n  }\n\n  buildAllergyCheckboxes() {\n    const checkboxes = this.commonAllergies.map(allergy => {\n      return this.formBuilder.control(false); \n    });\n\n    return this.formBuilder.array(checkboxes);\n  }\n\n  setInitialCheckboxValues() {\n    const allergyControls = this.patientAllergiesForm.get('commonAllergies') as FormArray;\n\n    this.patient.allergies.forEach(allergy => {\n      const index = this.commonAllergies.findIndex(a => a.id === allergy.id);\n      if (index !== -1) {\n        allergyControls.controls[index].setValue(true);\n      }\n    });\n    console.log('Allergy Controls:', allergyControls.value);\n  }\n\n  getCommonAllergiesControl(index: number): FormControl {\n    const commonAllergiesArray = this.patientAllergiesForm.get('commonAllergies') as FormArray;\n    return commonAllergiesArray.controls[index] as FormControl;\n  }\n\n  onSubmitAllergies() {\n    this.patient.allergies = this.patientAllergiesForm.value.commonAllergies\n      .map((checked: boolean, index: number) => checked ? this.commonAllergies[index] : null)\n      .filter((allergy: Allergy | null): allergy is Allergy => allergy !== null);\n    this.patientService.editPatient(this.patient)\n    .subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n\n  onSubmit(personalInfo: NgForm) {\n    if(personalInfo.valid){\n      this.patientService.editPerson(this.person? this.person: {} as Person)\n    .subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n    this.patientService.editAddress(this.address? this.address: {} as Address)\n    .subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n    this.patientService.editEmergencyContact(this.emergencyContact? this.emergencyContact: {} as EmergencyContact)\n    .subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n    }    \n  }\n  onAppointmentSubmit(appointmentInfo: NgForm){\n   if(this.appointment.id == \"00000000-0000-0000-0000-000000000000\"){\n    this.insertAppointment(appointmentInfo);\n   }\n   else{\n    this.updateAppointment(appointmentInfo);\n   }\n  }\n  insertAppointment(appointmentInfo: NgForm){\n    this.patientService.postAppointment(this.appointment)\n    .subscribe({\n      next: res => {\n        this.appointments = res as Appointment[];\n        this.resetAppointmentForm(appointmentInfo);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  updateAppointment(appointmentInfo: NgForm){\n    this.patientService.editAppointment(this.appointment)\n    .subscribe({\n      next: res => {\n        this.appointments = res as Appointment[];\n        this.resetAppointmentForm(appointmentInfo);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  deleteAppointment(id: string){\n    this.patientService.deleteAppointment(id)\n    .subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  populateAppointmentForm(appointment: AppointmentPostModel){\n    this.appointment = Object.assign({}, appointment);\n  }\n  resetAppointmentForm(appointmentInfo: NgForm){\n    appointmentInfo.form.reset();\n    this.appointment = new AppointmentPostModel();\n  }\n\n  onPrescriptionSubmit(prescriptionInfo: NgForm){\n    if(this.prescription.id == \"00000000-0000-0000-0000-000000000000\"){\n      this.insertPrescription(prescriptionInfo);\n     }\n     else{\n      this.updatePrescription(prescriptionInfo);\n     }\n  }\n\n  insertPrescription(prescriptionInfo: NgForm){\n    this.patientService.postPrescription(this.prescription)\n    .subscribe({\n      next: res => {\n        this.prescriptions = res as Prescription[];\n        this.resetPrescriptionForm(prescriptionInfo);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n\n  updatePrescription(prescriptionInfo: NgForm){\n    this.patientService.editPrescription(this.prescription)\n    .subscribe({\n      next: res => {\n        this.prescriptions = res as Prescription[];\n        this.resetPrescriptionForm(prescriptionInfo);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n\n  deletePrescription(id: string){\n    this.patientService.deletePrescription(id)\n    .subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  populatePrescriptionForm(prescription: PrescriptionPostModel){\n    this.prescription = Object.assign({}, prescription);\n  }\n  resetPrescriptionForm(prescriptionInfo: NgForm){\n    prescriptionInfo.form.reset();\n    this.prescription = new PrescriptionPostModel();\n  }\n\n  onPrescriptionHistorySubmit(prescriptionHistoryInfo: NgForm){\n    if(this.prescriptionHistory.id == \"00000000-0000-0000-0000-000000000000\"){\n      this.insertPrescriptionHistory(prescriptionHistoryInfo);\n     }\n     else{\n      this.updatePrescriptionHistory(prescriptionHistoryInfo);\n     }\n  }\n\n  insertPrescriptionHistory(prescriptionHistoryInfo: NgForm){\n    this.prescriptionHistory.prescriptionId = this.prescription.id;\n    this.patientService.postPrescriptionHistory(this.prescriptionHistory)\n    .subscribe({\n      next: res => {\n        this.prescriptionHistories = res as PrescriptionHistory[];\n        this.resetPrescriptionHistoryForm(prescriptionHistoryInfo);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n\n  updatePrescriptionHistory(prescriptionHistoryInfo: NgForm){\n    this.prescriptionHistory.prescriptionId = this.prescription.id;\n    this.patientService.editPrescriptionHistory(this.prescriptionHistory)\n    .subscribe({\n      next: res => {\n        this.prescriptionHistories = res as PrescriptionHistory[];\n        this.resetPrescriptionHistoryForm(prescriptionHistoryInfo);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n\n  deletePrescriptionHistory(id: string){\n    this.patientService.deletePrescriptionHistory(id)\n    .subscribe({\n      next: res => {\n        console.log(res);\n      },\n      error: err => {\n        console.log(err);\n      }\n    });\n  }\n  populatePrescriptionHistoryForm(prescriptionHistory: PrescriptionHistory){\n    this.prescriptionHistory = Object.assign({}, prescriptionHistory);\n  }\n  resetPrescriptionHistoryForm(prescriptionHistoryInfo: NgForm){\n    prescriptionHistoryInfo.form.reset();\n    this.prescriptionHistory = new PrescriptionHistory();\n  }\n  isPrescriptionIdEmpty(): boolean {\n    return this.prescription.id === \"00000000-0000-0000-0000-000000000000\";\n}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}